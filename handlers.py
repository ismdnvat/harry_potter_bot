import random
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from config import VALID_SUBJECTS, FACULTIES, PLAYER_ROLE
from db import get_connection
from states import ProfileStates, QuizStates

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

conn = get_connection()
cursor = conn.cursor()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ')
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –û–ø—Ä–æ—Å–Ω–∏–∫! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
        reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
async def setup_profile(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ò–º—è", callback_data='name'),
                 InlineKeyboardButton("–§–∞–∫—É–ª—å—Ç–µ—Ç", callback_data='faculty'),
                 InlineKeyboardButton("–ö—É—Ä—Å", callback_data='year'),
                 InlineKeyboardButton("–†–æ–ª—å –≤ –ö–≤–∏–¥–¥–∏—á–µ", callback_data='quidditch_role'),
                 InlineKeyboardButton("–û—Ü–µ–Ω–∫–∏", callback_data='grades'))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:', reply_markup=keyboard)
    await ProfileStates.SETTING_PROFILE.set()


@dp.callback_query_handler(state=ProfileStates.SETTING_PROFILE)
async def process_profile_setup(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'name':
        await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        await ProfileStates.SETTING_NAME.set()
    elif callback_query.data == 'faculty':
        await callback_query.message.answer('–•–º–º–º... –∫—É–¥–∞ –∂–µ —Ç–µ–±—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å? ü§î')
        await distribute_faculty(callback_query.message, state)
    elif callback_query.data == 'year':
        keyboard = InlineKeyboardMarkup(row_width=2)
        for year in range(1, 8):
            keyboard.add(InlineKeyboardButton(str(year), callback_data=str(year)))
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å:', reply_markup=keyboard)
        await ProfileStates.SETTING_YEAR.set()
    elif callback_query.data == 'quidditch_role':
        keyboard = InlineKeyboardMarkup(row_width=2)
        roles = ["–û—Ö–æ—Ç–Ω–∏–∫", "–õ–æ–≤–µ—Ü", "–ó–∞–≥–æ–Ω—â–∏–∫", "–í—Ä–∞—Ç–∞—Ä—å", "–ó—Ä–∏—Ç–µ–ª—å"]
        for role in roles:
            keyboard.add(InlineKeyboardButton(role, callback_data=role.lower()))
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ –ö–≤–∏–¥–¥–∏—á–µ:', reply_markup=keyboard)
        await ProfileStates.SETTING_QUIDDITCH_ROLE.set()
    elif callback_query.data == 'grades':
        keyboard = InlineKeyboardMarkup()
        subjects = ['–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è', '–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è', '–ó–∞—â–∏—Ç–∞ –æ—Ç –¢—ë–º–Ω—ã—Ö –∏—Å–∫—É—Å—Å—Ç–≤', '–ó–µ–ª—å–µ–≤–∞—Ä–µ–Ω–∏–µ', '–ò—Å—Ç–æ—Ä–∏—è –º–∞–≥–∏–∏', '–¢—Ä–∞–≤–æ–ª–æ–≥–∏—è', '–¢—Ä–∞–Ω—Å—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', '–ü–æ–ª—ë—Ç—ã –Ω–∞ –º—ë—Ç–ª–∞—Ö']
        for subject in subjects:
            keyboard.add(InlineKeyboardButton(subject, callback_data=subject.lower()))
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏:', reply_markup=keyboard)
        await ProfileStates.CHOOSING_SUBJECT.set()


@dp.callback_query_handler(state=ProfileStates.CHOOSING_SUBJECT)
async def choose_subject(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(subject=callback_query.data)
    keyboard = InlineKeyboardMarkup(row_width=5)
    for grade in range(1, 11):
        keyboard.add(InlineKeyboardButton(str(grade), callback_data=str(grade)))
    await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10:', reply_markup=keyboard)
    await ProfileStates.SETTING_GRADE.set()

@dp.callback_query_handler(state=ProfileStates.SETTING_GRADE)
async def set_grade(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_data = await state.get_data()
    subject = user_data['subject']
    grade = int(callback_query.data)

    if subject not in VALID_SUBJECTS:
        await callback_query.message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç.')
        return

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    if cursor.fetchone() is None:
        cursor.execute(f'INSERT INTO users (user_id, {VALID_SUBJECTS[subject]}) VALUES (?, ?)', (user_id, grade))
    else:
        cursor.execute(f'UPDATE users SET {VALID_SUBJECTS[subject]} = ? WHERE user_id = ?', (grade, user_id))

    conn.commit()
    await callback_query.message.answer(f'–û—Ü–µ–Ω–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject.capitalize()}" –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {grade}.')
    await state.finish()

@dp.message_handler(state=ProfileStates.SETTING_NAME)
async def set_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    if cursor.fetchone() is None:
        cursor.execute('INSERT INTO users (user_id, name) VALUES (?, ?)', (user_id, name))
    else:
        cursor.execute('UPDATE users SET name = ? WHERE user_id = ?', (name, user_id))

    conn.commit()
    await message.answer(f'–í–∞—à–µ –∏–º—è –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {name}.')
    await state.finish()

@dp.message_handler(state=ProfileStates.SETTING_FACULTY)
async def distribute_faculty(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    faculty_name, faculty_code = random.choice(list(FACULTIES.items()))

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    if cursor.fetchone() is None:
        cursor.execute('INSERT INTO users (user_id, faculty) VALUES (?, ?)', (user_id, faculty_name))
    else:
        cursor.execute('UPDATE users SET faculty = ? WHERE user_id = ?', (faculty_name, user_id))

    conn.commit()

    photo = InputFile(f'img/{faculty_code}.jpg')
    await message.answer_photo(photo=photo, caption=f'–í—ã –±—ã–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ {faculty_name}!')
    await state.finish()

@dp.callback_query_handler(state=ProfileStates.SETTING_YEAR)
async def set_year(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    year = int(callback_query.data)

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    if cursor.fetchone() is None:
        cursor.execute('INSERT INTO users (user_id, year) VALUES (?, ?)', (user_id, year))
    else:
        cursor.execute('UPDATE users SET year = ? WHERE user_id = ?', (year, user_id))

    conn.commit()
    await callback_query.message.answer(f'–í–∞—à –∫—É—Ä—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {year}.')
    await state.finish()


@dp.callback_query_handler(state=ProfileStates.SETTING_QUIDDITCH_ROLE)
async def set_quidditch_role(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    quidditch_role = callback_query.data

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    if cursor.fetchone() is None:
        cursor.execute('INSERT INTO users (user_id, quidditch_role) VALUES (?, ?)', (user_id, quidditch_role))
    else:
        cursor.execute('UPDATE users SET quidditch_role = ? WHERE user_id = ?', (quidditch_role, user_id))

    conn.commit()
    await callback_query.message.answer(f'–í–∞—à–∞ —Ä–æ–ª—å –≤ –ö–≤–∏–¥–¥–∏—á–µ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {quidditch_role}.')
    await state.finish()

@dp.message_handler(lambda message: message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
async def edit_profile(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ò–º—è", callback_data='edit_name'),
                 InlineKeyboardButton("–§–∞–∫—É–ª—å—Ç–µ—Ç", callback_data='edit_faculty'),
                 InlineKeyboardButton("–ö—É—Ä—Å", callback_data='edit_year'),
                 InlineKeyboardButton("–†–æ–ª—å –≤ –ö–≤–∏–¥–¥–∏—á–µ", callback_data='edit_quidditch_role'))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:', reply_markup=keyboard)
    await ProfileStates.EDITING_PROFILE.set()


@dp.callback_query_handler(state=ProfileStates.EDITING_PROFILE)
async def process_profile_editing(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'edit_name':
        await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:')
        await ProfileStates.EDIT_NAME.set()
    elif callback_query.data == 'edit_faculty':
        await callback_query.message.answer('–•–º–º–º... –∫—É–¥–∞ –∂–µ —Ç–µ–±—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å? ü§î')
        await distribute_faculty(callback_query.message, state)
    elif callback_query.data == 'edit_year':
        keyboard = InlineKeyboardMarkup(row_width=2)
        for year in range(1, 8):
            keyboard.add(InlineKeyboardButton(str(year), callback_data=str(year)))
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –∫—É—Ä—Å:', reply_markup=keyboard)
        await ProfileStates.EDIT_YEAR.set()
    elif callback_query.data == 'edit_quidditch_role':
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(InlineKeyboardButton("–û—Ö–æ—Ç–Ω–∏–∫", callback_data='Chaser'),
                     InlineKeyboardButton("–õ–æ–≤–µ—Ü", callback_data='Seeker'),
                     InlineKeyboardButton("–ó–∞–≥–æ–Ω—â–∏–∫", callback_data='Beater'),
                     InlineKeyboardButton("–í—Ä–∞—Ç–∞—Ä—å", callback_data='Keeper'),
                     InlineKeyboardButton("–ù–µ –∏–≥—Ä–∞—é", callback_data='None'))
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –Ω–æ–≤—É—é —Ä–æ–ª—å –≤ –∫–≤–∏–¥–¥–∏—á–µ:', reply_markup=keyboard)
        await ProfileStates.EDIT_QUIDDITCH_ROLE.set()

@dp.message_handler(state=ProfileStates.EDIT_NAME)
async def update_name(message: types.Message, state: FSMContext):
    name = message.text
    cursor.execute('UPDATE users SET name = ? WHERE user_id = ?', (name, message.from_user.id))
    conn.commit()
    await message.answer(f'–í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {name}')
    await state.finish()


@dp.callback_query_handler(lambda c: c.data.isdigit(), state=ProfileStates.EDIT_YEAR)
async def update_year(callback_query: types.CallbackQuery, state: FSMContext):
    year = int(callback_query.data)
    cursor.execute('UPDATE users SET year = ? WHERE user_id = ?', (year, callback_query.from_user.id))
    conn.commit()
    await callback_query.message.answer(f'–í–∞—à –∫—É—Ä—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {year}')
    await state.finish()


@dp.callback_query_handler(lambda c: c.data in ['Chaser', 'Seeker', 'Beater', 'Keeper', 'None'], state=ProfileStates.EDIT_QUIDDITCH_ROLE)
async def update_quidditch_role(callback_query: types.CallbackQuery, state: FSMContext):
    role = callback_query.data
    cursor.execute('UPDATE users SET quidditch_role = ? WHERE user_id = ?', (role, callback_query.from_user.id))

    await callback_query.message.answer(f'–í–∞—à–∞ —Ä–æ–ª—å –≤ –∫–≤–∏–¥–¥–∏—á–µ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {PLAYER_ROLE[role]}')
    await state.finish()

@dp.message_handler(lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ')
async def view_profile(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user_data = cursor.fetchone()

    if user_data:
        user_info = (
            f"–ò–º—è: {user_data[1]}\n"
            f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {user_data[2]}\n"
            f"–ö—É—Ä—Å: {user_data[3]}\n"
            f"–†–æ–ª—å –≤ –ö–≤–∏–¥–¥–∏—á–µ: {PLAYER_ROLE[user_data[4]]}\n"
            f"–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è: {user_data[5]}\n"
            f"–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è: {user_data[6]}\n"
            f"–ó–∞—â–∏—Ç–∞ –æ—Ç –¢—ë–º–Ω—ã—Ö –∏—Å–∫—É—Å—Å—Ç–≤: {user_data[7]}\n"
            f"–ó–µ–ª—å–µ–≤–∞—Ä–µ–Ω–∏–µ: {user_data[8]}\n"
            f"–ò—Å—Ç–æ—Ä–∏—è –º–∞–≥–∏–∏: {user_data[9]}\n"
            f"–¢—Ä–∞–≤–æ–ª–æ–≥–∏—è: {user_data[10]}\n"
            f"–¢—Ä–∞–Ω—Å—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {user_data[11]}\n"
            f"–ü–æ–ª—ë—Ç—ã –Ω–∞ –º—ë—Ç–ª–∞—Ö: {user_data[12]}"
        )
    else:
        user_info = "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞."

    await message.answer(user_info)


@dp.message_handler(lambda message: message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
async def edit_profile(message: types.Message):
    await message.answer('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.')


@dp.message_handler(lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
async def delete_profile(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
    conn.commit()
    await message.answer('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω.')